<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>开始学习Markdown整理博文和笔记</title>
      <link href="/2024/06/08/Markdown%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%95%99%E7%A8%8B/"/>
      <url>/2024/06/08/Markdown%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown简明语法教程"><a href="#Markdown简明语法教程" class="headerlink" title="Markdown简明语法教程"></a>Markdown简明语法教程</h1><p><strong>说明：</strong></p><ul><li>本教程基于Markdown语言编写，项目地址位于<a href="https://github.com/Melo618/Simple-Markdown-Guide">Simple-Markdown-Guide</a>。</li><li>本教程定位为基础教程，更加详细的用法可参考其他资料。</li><li>本教程中代码块内的代码为Markdown的语法。</li><li>本教程中部分语法使用的是<a href="https://help.github.com/articles/github-flavored-markdown/">GitHub Flavored Markdown</a>，GFM语法与标准语法在不同环境中存在解析差异，本教程在使用时会加以说明。</li><li>推荐使用Haroopad(Win)、MarkdownPad(Win)和Mou(OS X)编辑器，部分编辑器中文效果欠佳，可通过自定义CSS字体解决。</li></ul><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><ul><li>Markdown是一种用来写作的轻量级标记语言。</li><li>用标记语法，来代替常见的排版格式。</li><li>兼容 HTML代码。</li><li>特殊字符自动转换，例如<code>&lt;</code>和<code>&amp;</code>。</li></ul><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><ul><li><p>使用星号<code>*</code>和底号<code>_</code>表示<code>&lt;em&gt;</code>标签。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">_斜体_</span><br></pre></td></tr></table></figure><p>效果：</p><p><em>斜体</em></p></li><li><p>使用双星号<code>**</code>和双底号<code>__</code>表示<code>&lt;strong&gt;</code>标签。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**强调**</span><br><span class="line">__强调__</span><br></pre></td></tr></table></figure><p>效果：</p><p><strong>强调</strong></p></li></ul><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><ul><li>单一段落用空白行。</li></ul><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><ul><li><p>生成<code>&lt;h1&gt;</code>-<code>&lt;h6&gt;</code>标签，是通过在文字前面加上同等个数<code>#</code>符号来实现。</p></li><li><p>出于美观，也可以使用对称的闭合式标题符号。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### 这是标题</span><br><span class="line">### 这是标题 ###</span><br></pre></td></tr></table></figure><p>效果：</p><h3 id="这是标题"><a href="#这是标题" class="headerlink" title="这是标题"></a>这是标题</h3></li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><p><code>*</code>，<code>-</code>，<code>+</code>这三个符号效果都一样，这3个符号被称为Markdown列表符号。而有序列表则使用数字接着一个英文句点（数字大小并不会影响输出序列）。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* 第一行</span><br><span class="line">* 第二行</span><br><span class="line">* 第三行</span><br><span class="line">6. 第四行</span><br><span class="line">5. 第五行</span><br><span class="line">4. 第六行</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li>第一行</li><li>第二行</li><li>第三行</li></ul><ol start="6"><li>第四行</li><li>第五行</li><li>第六行</li></ol></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><p><code>&gt;</code>符号表示引用，可简写于第一行，也可以每一行都添加。</p></li><li><p>区块的引用可以嵌套，只需要在层次数上加上同等数量的<code>&gt;</code>符号。</p></li><li><p>引用内可以使用其他Markdown语法，包括标题、列表、代码区块等。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;    引用</span><br><span class="line">&gt;    &gt;    引用中的引用</span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><p>   引用</p><blockquote><p>   引用中的引用</p></blockquote></blockquote></li></ul><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><ul><li><p><code>`</code>是表示inline代码，4个<code> </code>（空格）来表示缩进式代码段，分别对应HTML的<code>&lt;code&gt;</code>，<code>&lt;pre&gt;</code>标签。也可以使用<code>```</code>来表达围栏式代码块（<strong>GFM语法</strong>，部分编辑器不支持），并指定他的语言类型，实现语法高亮。围栏式代码块可以大量减少缩进的使用，大规模的代码块使用非常方便。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`sort()` 函数按升序对给定数组的值排序。</span><br></pre></td></tr></table></figure><p>普通的缩进式代码块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $my_array = array(&#x27;a&#x27; =&gt; &#x27;Dog&#x27;, &#x27;b&#x27; =&gt; &#x27;Cat&#x27;);</span><br><span class="line">    sort($my_array);</span><br><span class="line">    print_r($my_array);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>带语法高亮的围栏式代码块（<strong>GFM语法</strong>，部分编辑器不支持）。</p><pre><code><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$my_array</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;Dog&#x27;</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="string">&#x27;Cat&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">sort</span>(<span class="variable">$my_array</span>);</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$my_array</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></code></pre><p>效果：</p><p><code>sort()</code> 函数按升序对给定数组的值排序。</p><p>普通的缩进式代码块。</p><pre><code>&lt;?php    $my_array = array(&#39;a&#39; =&gt; &#39;Dog&#39;, &#39;b&#39; =&gt; &#39;Cat&#39;);    sort($my_array);    print_r($my_array);?&gt;</code></pre><p>带语法高亮的围栏式代码块（<strong>GFM语法</strong>，部分编辑器不支持）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$my_array</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;Dog&#x27;</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="string">&#x27;Cat&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">sort</span>(<span class="variable">$my_array</span>);</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$my_array</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li><p>Markdown支持两种形式的链接语法：行内式和参考式两种形式。</p><p>行内式链接，是在方括号后面接圆括号即可。<br>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Google](https://www.google.com &quot;Google&quot;)</span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="https://www.google.com/" title="Google">Google</a></p><p>参考式链接，是在链接文字的括号后面加上另一个方括号，在第二个方括号里面要填入用以辨识链接的标记。<br>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Google][GOOGL]</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">效果：</span><br><span class="line"></span><br><span class="line">[Google][GOOGL]</span><br><span class="line"></span><br><span class="line">[GOOGL]: https://www.google.com &quot;Google&quot;</span><br><span class="line"></span><br><span class="line">## 图片</span><br><span class="line"></span><br><span class="line">* Markdown使用一种和链接很相似的语法来标记图片，只是多了一个`!`在最前面，同样也允许两种样式：行内式和参考式。</span><br><span class="line">* 目前为止，Markdown还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的`&lt;img&gt;`标签。</span><br><span class="line"></span><br><span class="line">行内式链接，是在方括号后面接圆括号即可。</span><br><span class="line">例如：</span><br></pre></td></tr></table></figure><p>  <img src="https://www.wikipedia.org/portal/wikipedia.org/assets/img/Wikipedia-logo-v2.png" alt="Wikipedia" title="Wikipedia"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">效果：</span><br><span class="line"></span><br><span class="line">![Wikipedia](https://www.wikipedia.org/portal/wikipedia.org/assets/img/Wikipedia-logo-v2.png &quot;Wikipedia&quot;)</span><br><span class="line"></span><br><span class="line">## 分隔线</span><br><span class="line"></span><br><span class="line">* 使用三个以上的`*`、`-`来建立一个分隔线，行内不能有其他字符。</span><br><span class="line"></span><br><span class="line">例如：</span><br></pre></td></tr></table></figure><hr><hr><hr><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">效果：</span><br><span class="line"></span><br><span class="line">上文</span><br><span class="line">- - -</span><br><span class="line">下文</span><br><span class="line"></span><br><span class="line">## 表格</span><br><span class="line"></span><br><span class="line">* Markdown使用`|`和`-`来绘制表格，`:`可控制左对齐、右对齐及居中。</span><br><span class="line"></span><br><span class="line">例如：</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Title</th><th align="center">Description</th></tr></thead><tbody><tr><td align="left">Version</td><td align="center">0.0.1</td></tr><tr><td align="left">Editor</td><td align="center"><a href="mailto:Editor@Email.com">Melo618</a></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">效果：</span><br><span class="line"></span><br><span class="line">| Title   | Description                        |</span><br><span class="line">| :------ | :--------------------------------: |</span><br><span class="line">| Version | 0.0.1                              |</span><br><span class="line">| Editor  | [Melo618](mailto:Editor@Email.com) |</span><br><span class="line"></span><br><span class="line">## 特殊符号</span><br><span class="line"></span><br><span class="line">* Markdown利用`\`字符来转义一些在语法中有特殊意义的符号。</span><br><span class="line"></span><br><span class="line">## 推荐阅读</span><br><span class="line"></span><br><span class="line">* [Markdown语法说明（简体中文版）](http://wowubuntu.com/markdown/index.html)</span><br><span class="line">* [Markdown Syntax Documentation](http://daringfireball.net/projects/markdown/syntax)</span><br><span class="line">* [GitHub Flavored Markdown](https://help.github.com/articles/github-flavored-markdown)</span><br><span class="line"></span><br><span class="line">## License</span><br><span class="line"></span><br><span class="line">Copyright © 2014-2018, Melo Chan. [MIT License](http://opensource.org/licenses/MIT).</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 项目中使用Log4j2</title>
      <link href="/2024/06/08/SpringBoot%20%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8Log4j2%E8%AF%A6%E7%BB%86%EF%BC%88%E9%81%BF%E5%9D%91%EF%BC%89/"/>
      <url>/2024/06/08/SpringBoot%20%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8Log4j2%E8%AF%A6%E7%BB%86%EF%BC%88%E9%81%BF%E5%9D%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-项目中使用Log4j2详细（避坑）"><a href="#SpringBoot-项目中使用Log4j2详细（避坑）" class="headerlink" title="SpringBoot 项目中使用Log4j2详细（避坑）"></a>SpringBoot 项目中使用Log4j2详细（避坑）</h1><p>以下部分内容转载整理自 <a href="https://blog.csdn.net/vbirdbest/article/details/71751835" title="log4j2 实际使用详解_vbirdbest的博客-CSDN博客_log4j2">log4j2 实际使用详解_vbirdbest 的博客-CSDN 博客_log4j2</a> ，感谢 <a href="https://blog.csdn.net/vbirdbest" title="vbirdbest">vbirdbest</a> 的相关知识分享</p><h3 id="首先，认识一下三胞胎"><a href="#首先，认识一下三胞胎" class="headerlink" title="首先，认识一下三胞胎"></a>首先，认识一下三胞胎</h3><ul><li>log4j 是 apache 实现的一个开源日志组件</li><li>logback 同样是由 log4j 的作者设计完成的，拥有更好的特性，用来取代 log4j 的一个日志框架，是 slf4j 的原生实现</li><li>Log4j2 是 log4j 1.x 和 logback 的改进版，据说采用了一些新技术（无锁异步、等等），使得日志的吞吐量、性能比 log4j 1.x 提高 10 倍，并解决了一些死锁的 bug，而且配置更加简单灵活</li></ul><h3 id="然后，了解一下，使用-slf4j-log4j-和直接用-log4j-的区别"><a href="#然后，了解一下，使用-slf4j-log4j-和直接用-log4j-的区别" class="headerlink" title="然后，了解一下，使用 slf4j+log4j 和直接用 log4j 的区别"></a>然后，了解一下，使用 slf4j+log4j 和直接用 log4j 的区别</h3><p>slf4j 是对所有日志框架制定的一种规范、标准、接口，并不是一个框架的具体的实现，因为接口并不能独立使用，需要和具体的日志框架实现配合使用（如 log4j、logback），使用接口的好处是当项目需要更换日志框架的时候，只需要更换 jar 和配置，不需要更改相关 java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSlf4j</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Logger和LoggerFactory导入的是org.slf4j包</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(TestSlf4j .class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>log4j、logback、log4j2 都是一种日志具体实现框架，所以既可以单独使用也可以结合 slf4j 一起搭配使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLog4j</span> &#123;</span><br><span class="line">    <span class="comment">// Logger和LogManager导入的是org.apache.logging包</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LogManager.getLogger(TestLog4j.class); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一、导入需要使用的-jar-包-slf4j-log4j2"><a href="#一、导入需要使用的-jar-包-slf4j-log4j2" class="headerlink" title="一、导入需要使用的 jar 包(slf4j+log4j2)"></a>一、导入需要使用的 jar 包(slf4j+log4j2)</h2><p>springboot 项目中需导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>绕坑：如项目中有导入 spring-boot-starter-web 依赖包记得去掉 spring 自带的日志依赖 spring-boot-starter-logging，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="二、开始配置"><a href="#二、开始配置" class="headerlink" title="二、开始配置"></a>二、开始配置</h2><p>springboot 方式：</p><p>application.properties 中添加配置 logging.config&#x3D;classpath:log4j2_dev.xml， log4j2_dev.xml 是你创建的 log4j2 的配置文件名，放在 resources 下，如放在其他路径则对应修改</p><p>Web 工程方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;context-param&gt;  </span><br><span class="line">    &lt;param-name&gt;log4jConfiguration&lt;/param-name&gt;  </span><br><span class="line">    &lt;param-value&gt;/WEB-INF/conf/log4j2.xml&lt;/param-value&gt;  </span><br><span class="line">&lt;/context-param&gt;  </span><br><span class="line"></span><br><span class="line">&lt;listener&gt;  </span><br><span class="line">    &lt;listener-class&gt;org.apache.logging.log4j.web.Log4jServletContextListener&lt;/listener-class&gt;  </span><br><span class="line">&lt;/listener&gt; </span><br></pre></td></tr></table></figure><p>纯 Java 方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/log4j2.xml&quot;</span>);  </span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file));  </span><br><span class="line">    <span class="keyword">final</span> <span class="type">ConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConfigurationSource</span>(in);  </span><br><span class="line">    Configurator.initialize(<span class="literal">null</span>, source);  </span><br><span class="line"></span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(<span class="string">&quot;myLogger&quot;</span>);  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>配置文件的格式：log2j 配置文件可以是 xml 格式的，也可以是 json 格式的，<br>配置文件的位置：log4j2 默认会在 classpath 目录下寻找 log4j2.xml、log4j.json、log4j.jsn 等名称的文件，如果都没有找到，则会按默认配置输出，也就是输出到控制台，也可以对配置文件自定义位置（需要在 web.xml 中配置），一般放置在 src&#x2F;main&#x2F;resources 根目录下即可</p><p>贴上 log4j2_dev.properties 的配置再来讲解</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;WARN&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span>&gt;</span>D:/logs<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILE_NAME&quot;</span>&gt;</span>mylog<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.sql.level&quot;</span>&gt;</span>info<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %l - %msg%n&quot;</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">&quot;RollingRandomAccessFile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;LOG_HOME&#125;/$&#123;FILE_NAME&#125;.log&quot;</span> <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;LOG_HOME&#125;/$$&#123;date:yyyy-MM&#125;/$&#123;FILE_NAME&#125;-%d&#123;yyyy-MM-dd HH-mm&#125;-%i.log&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %l - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;10 MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span> /&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;RollingRandomAccessFile&quot;</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">&quot;com.mengdee.dao&quot;</span> <span class="attr">level</span>=<span class="string">&quot;$&#123;log.sql.level&#125;&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>log4j2.xml 文件的配置大致如下：</p><ul><li><p>Configuration</p><ul><li><p>properties</p></li><li><p>Appenders</p><ul><li><p>Console</p><ul><li>PatternLayout</li></ul></li><li><p>File</p></li><li><p>RollingRandomAccessFile</p></li><li><p>Async</p></li></ul></li><li><p>Loggers</p><ul><li><p>Logger</p></li><li><p>Root</p><ul><li>AppenderRef</li></ul></li></ul></li></ul></li></ul><hr><ul><li><p>Configuration：为根节点，有 status 和 monitorInterval 等多个属性</p><ul><li>status 的值有 “trace”, “debug”, “info”, “warn”, “error” and “fatal”，用于控制 log4j2 日志框架本身的日志级别，如果将 stratus 设置为较低的级别就会看到很多关于 log4j2 本身的日志，如加载 log4j2 配置文件的路径等信息</li><li>monitorInterval，含义是每隔多少秒重新读取配置文件，可以不重启应用的情况下修改配置</li></ul></li><li><p>Appenders：输出源，用于定义日志输出的地方<br>log4j2 支持的输出源有很多，有控制台 Console、文件 File、RollingRandomAccessFile、MongoDB、Flume 等</p><ul><li><p>Console：控制台输出源是将日志打印到控制台上，开发的时候一般都会配置，以便调试</p></li><li><p>File：文件输出源，用于将日志写入到指定的文件，需要配置输入到哪个位置（例如：D:&#x2F;logs&#x2F;mylog.log）</p></li><li><p>RollingRandomAccessFile: 该输出源也是写入到文件，不同的是比 File 更加强大，可以指定当文件达到一定大小（如 20MB）时，另起一个文件继续写入日志，另起一个文件就涉及到新文件的名字命名规则，因此需要配置文件命名规则<br>这种方式更加实用，因为你不可能一直往一个文件中写，如果一直写，文件过大，打开就会卡死，也不便于查找日志。</p><ul><li>fileName 指定当前日志文件的位置和文件名称</li><li>filePattern 指定当发生 Rolling 时，文件的转移和重命名规则</li><li>SizeBasedTriggeringPolicy 指定当文件体积大于 size 指定的值时，触发 Rolling</li><li>DefaultRolloverStrategy 指定最多保存的文件个数</li><li>TimeBasedTriggeringPolicy 这个配置需要和 filePattern 结合使用，注意 filePattern 中配置的文件重命名规则是 ${FILE_NAME}-%d{yyyy-MM-dd HH-mm}-%i，最小的时间粒度是 mm，即分钟</li><li>TimeBasedTriggeringPolicy 指定的 size 是 1，结合起来就是每 1 分钟生成一个新文件。如果改成 %d{yyyy-MM-dd HH}，最小粒度为小时，则每一个小时生成一个文件</li></ul></li><li><p>NoSql：MongoDb, 输出到 MongDb 数据库中</p></li><li><p>Flume：输出到 Apache Flume（Flume 是 Cloudera 提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume 支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume 提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。）</p></li><li><p>Async：异步，需要通过 AppenderRef 来指定要对哪种输出源进行异步（一般用于配置 RollingRandomAccessFile）</p></li></ul><p>PatternLayout：控制台或文件输出源（Console、File、RollingRandomAccessFile）都必须包含一个 PatternLayout 节点，用于指定输出文件的格式（如 日志输出的时间 文件 方法 行数 等格式），例如 pattern&#x3D;”%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n”</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">%d&#123;HH:mm:ss.SSS&#125; 表示输出到毫秒的时间</span><br><span class="line">%t 输出当前线程名称</span><br><span class="line">%-5level 输出日志级别，-<span class="number">5</span>表示左对齐并且固定输出<span class="number">5</span>个字符，如果不足在右边补<span class="number">0</span></span><br><span class="line">%logger 输出logger名称，因为Root Logger没有名称，所以没有输出</span><br><span class="line">%msg 日志文本</span><br><span class="line">%n 换行</span><br><span class="line"></span><br><span class="line">其他常用的占位符有：</span><br><span class="line">%F 输出所在的类文件名，如Log4j2Test.java</span><br><span class="line">%L 输出行号</span><br><span class="line">%M 输出所在方法名</span><br><span class="line">%l 输出语句所在的行数, 包括类名、方法名、文件名、行数</span><br></pre></td></tr></table></figure><ul><li>Loggers：日志器<br>日志器分根日志器 Root 和自定义日志器，当根据日志名字获取不到指定的日志器时就使用 Root 作为默认的日志器，自定义时需要指定每个 Logger 的名称 name（对于命名可以以包名作为日志的名字，不同的包配置不同的级别等），日志级别 level，相加性 additivity（是否继承下面配置的日志器）， 对于一般的日志器（如 Console、File、RollingRandomAccessFile）一般需要配置一个或多个输出源 AppenderRef；<br>每个 logger 可以指定一个 level（TRACE, DEBUG, INFO, WARN, ERROR, ALL or OFF），不指定时 level 默认为 ERROR<br>additivity 指定是否同时输出 log 到父类的 appender，缺省为 true。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">&quot;rollingRandomAccessFileLogger&quot;</span> <span class="attr">level</span>=<span class="string">&quot;trace&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;true&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;RollingRandomAccessFile&quot;</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>properties: 属性<br>使用来定义常量，以便在其他配置的时候引用，该配置是可选的，例如定义日志的存放位置<br>D:&#x2F;logs</li></ul><h2 id="三、验证日志内容"><a href="#三、验证日志内容" class="headerlink" title="三、验证日志内容"></a>三、验证日志内容</h2><p>以下为练习写的 excel 数据存入数据库的 controller 层代码，其中加入 Log4j2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.tbj.service.ExcelService;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(UserController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ExcelService excelService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/import&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addUser</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        System.out.println(<span class="string">&quot;++++++++++++文件名++++++++&quot;</span>+filename);</span><br><span class="line"></span><br><span class="line">        logger.trace(<span class="string">&quot;trace level&quot;</span>);</span><br><span class="line">        logger.debug(<span class="string">&quot;debug level&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;info level&quot;</span>);</span><br><span class="line">        logger.warn(<span class="string">&quot;warn level&quot;</span>);</span><br><span class="line">        logger.error(<span class="string">&quot;error level&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">beginTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        logger.info(<span class="string">&quot;请求处理结束，耗时：&#123;&#125;毫秒&quot;</span>, (System.currentTimeMillis() - beginTime));    <span class="comment">//第一种用法</span></span><br><span class="line">        logger.info(<span class="string">&quot;请求处理结束，耗时：&quot;</span> + (System.currentTimeMillis() - beginTime)  + <span class="string">&quot;毫秒&quot;</span>);    <span class="comment">//第二种用法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            a = excelService.batchImport(filename, file);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  a ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试一些正常和错误的操作，以下为反馈的日志信息</p><p>​<img src="https://img-blog.csdn.net/20180910155708429?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1J5YW5Eb24=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/07/hello-world/"/>
      <url>/2024/06/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
